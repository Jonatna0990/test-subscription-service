// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/subscriptions": {
            "get": {
                "description": "Возвращает список всех подписок",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Подписки"
                ],
                "summary": "Получить все подписки",
                "responses": {
                    "200": {
                        "description": "Список подписок",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.SubscriptionResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет данные существующей подписки",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Подписки"
                ],
                "summary": "Обновить подписку",
                "parameters": [
                    {
                        "description": "Обновлённые данные подписки",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Обновлено",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Не найдена подписка",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Создаёт новую подписку",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Подписки"
                ],
                "summary": "Создать подписку",
                "parameters": [
                    {
                        "description": "Данные подписки",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Создано",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/summary": {
            "get": {
                "description": "Возвращает сумму всех подписок, соответствующих фильтру",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Подписки"
                ],
                "summary": "Подсчитать сумму подписок",
                "parameters": [
                    {
                        "description": "Фильтр для подсчёта",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetSubscriptionFilterListRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Результат подсчёта",
                        "schema": {
                            "$ref": "#/definitions/dto.GetSubscriptionFilterListResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}": {
            "get": {
                "description": "Возвращает подписку по её идентификатору",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Подписки"
                ],
                "summary": "Получить подписку по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID подписки",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Найденная подписка",
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Неправильный uuid",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Не найдено",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет подписку по её ID",
                "tags": [
                    "Подписки"
                ],
                "summary": "Удалить подписку",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID подписки",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Удалено",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Не найдено",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "request error"
                }
            }
        },
        "dto.GetSubscriptionFilterListRequest": {
            "type": "object",
            "required": [
                "endDate",
                "startDate"
            ],
            "properties": {
                "endDate": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "dto.GetSubscriptionFilterListResponse": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "total_cost": {
                    "type": "integer"
                }
            }
        },
        "dto.SubscriptionRequest": {
            "type": "object",
            "required": [
                "price",
                "service_name",
                "start_date"
            ],
            "properties": {
                "end_date": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "service_name": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "dto.SubscriptionResponse": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "service_name": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "request success"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3001",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Subscription Service API",
	Description:      "This is a sample swagger for subscription service API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
